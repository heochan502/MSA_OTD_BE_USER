<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.otd.otd_pointShop.application.point.PointMapper">

    <resultMap id="PointWithImagesMap" type="com.otd.otd_pointShop.entity.Point">
        <id property="pointId" column="point_id" />
        <result property="pointItemName" column="point_item_name" />
        <result property="pointItemContent" column="point_item_content" />
        <result property="pointItemImage" column="point_item_image" />

        <collection property="images" ofType="com.otd.otd_pointShop.entity.PointImage">
            <id property="imageId" column="image_id" />
            <result property="imageUrl" column="image_url" />
        </collection>
    </resultMap>

    <select id="countPointsByUserId" resultType="int">
        SELECT COUNT(*) FROM point WHERE user_id = #{userId}
    </select>

    <select id="findAllByUserId" resultMap="PointWithImagesMap">
        SELECT
            p.point_id, p.point_item_name, p.point_item_content, p.point_item_image,
            i.image_id, i.image_url
        FROM point p
        LEFT JOIN point_image i ON p.point_id = i.point_id
        WHERE p.user_id = #{userId}
        ORDER BY p.created_at DESC
        LIMIT #{offset}, #{pageSize}
    </select>

    <select id="findOneByUserIdAndPointId" resultMap="PointWithImagesMap">
        SELECT
            p.point_id, p.point_item_name, p.point_item_content, p.point_item_image,
            i.image_id, i.image_url
        FROM point p
        LEFT JOIN point_image i ON p.point_id = i.point_id
        WHERE p.point_id = #{pointId}
        AND p.user_id = #{userId}
    </select>

    <select id="findPointListByUser" resultType="com.otd.otd_pointShop.application.point.model.PointListRes">
        SELECT
        p.point_id AS pointId,
        p.point_item_name AS pointItemName,
        p.point_item_content AS pointItemContent,
        p.point_item_image AS pointItemImage,
        p.created_at AS createdAt
        FROM point p
        WHERE p.user_id = #{userId}
        ORDER BY p.created_at DESC
        LIMIT #{offset}, #{pageSize}
    </select>

    <insert id="savePoint">
        INSERT INTO point
        (user_id, point_score, point_item_name, point_item_content, point_item_image)
        VALUES
        (#{userId}, #{pointScore}, #{pointItemName}, #{pointItemContent}, #{pointItemImage})
    </insert>

    <update id="updatePoint">
        UPDATE point
        SET point_score = #{pointScore},
        point_item_name = #{pointItemName},
        point_item_content = #{pointItemContent},
        point_item_image = #{pointItemImage}
        WHERE point_id = #{pointId}
        AND user_id = #{userId}
    </update>

    <delete id="deletePoint">
        DELETE FROM point
        WHERE point_id = #{pointId}
        AND user_id = #{userId}
    </delete>

</mapper>